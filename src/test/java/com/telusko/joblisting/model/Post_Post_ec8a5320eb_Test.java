/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

Here are some test scenarios for the given Post function:

1. Empty Constructor Test: Since the Post function is an empty constructor, you should test whether a new instance of Post can be created successfully without passing any parameters.

2. MongoDB Connection Test: Since the Post function is related to MongoDB (as indicated by the import statement), you should test whether the connection to MongoDB is established successfully when the Post function is called.

3. Document Annotation Test: You should test whether the Post function is correctly mapped to the corresponding MongoDB document due to the @Document annotation.

4. Default Values Test: If there are any fields in the Post class and they have default values, you should test whether these fields are correctly initialized with their default values when a new instance is created using the Post function.

5. Null Values Test: If there are any fields in the Post class, you should test whether these fields are null when a new instance is created using the Post function.

6. Serialization Test: Test if an instance of Post can be successfully serialized and deserialized, as this is a common use-case in MongoDB operations.

7. Error Handling Test: Test how the function handles unexpected errors. For instance, what happens when there's a failure in connecting to the MongoDB database?

Please note that without more details about the Post class or its context, these test scenarios are quite general. If the Post class has more complicated logic or dependencies, more specific test scenarios may be needed.
*/
package com.telusko.joblisting.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.data.mongodb.core.mapping.Document;
import static org.junit.jupiter.api.Assertions.*;

public class Post_Post_ec8a5320eb_Test {
    private Post post;

    @BeforeEach
    public void setUp() {
        post = new Post();
    }

    @Test
    public void testEmptyConstructor() {
        assertNotNull(post);
    }

    @Test
    public void testDefaultValues() {
        assertNull(post.getProfile());
        assertNull(post.getDesc());
        assertEquals(0, post.getExp());
        assertNull(post.getTechs());
    }

    @Test
    public void testSetterAndGetter() {
        String profile = "Java Developer";
        String desc = "Java developer with spring boot experience";
        int exp = 5;
        String[] techs = {"Java", "Spring Boot", "MongoDB"};

        post.setProfile(profile);
        post.setDesc(desc);
        post.setExp(exp);
        post.setTechs(techs);

        assertEquals(profile, post.getProfile());
        assertEquals(desc, post.getDesc());
        assertEquals(exp, post.getExp());
        assertArrayEquals(techs, post.getTechs());
    }

    @Test
    public void testToString() {
        String profile = "Java Developer";
        String desc = "Java developer with spring boot experience";
        int exp = 5;
        String[] techs = {"Java", "Spring Boot", "MongoDB"};

        post.setProfile(profile);
        post.setDesc(desc);
        post.setExp(exp);
        post.setTechs(techs);

        String expected = "Post{" + "profile='" + profile + '\'' + ", desc='" + desc + '\'' + ", exp=" + exp + ", techs=" + Arrays.toString(techs) + '}';
        assertEquals(expected, post.toString());
    }
}
