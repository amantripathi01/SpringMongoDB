// ********RoostGPT********
/*
Test generated by RoostGPT for test aman5May using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getExp_a80bcda041
ROOST_METHOD_SIG_HASH=getExp_e90c52dc7e

Scenario 1: Testing when exp has a standard default value
Details:
  TestName: testGetExpDefaultValue
  Description: This test is intended to verify whether the getExp comportment correctly returns the exp default value.
Execution:
  Arrange: None, as there aren't required data to arrange in this case.
  Act: Invoke the getExp method without any parameters.
  Assert: Validate that the returned value is the integer number zero, being the default for type int.
Validation:
  The assertion is meant to confirm that the getExp method returns the correct default value. This verifies the expected behaviour of int properties in Java.

Scenario 2: Multiple invocations of getExp
Details:
  TestName: testGetExpConsistency
  Description: This test is meant to assess the consistency of getExp method by invoking it multiple times.
Execution:
  Arrange: None.
  Act: Invoke the getExp method multiple times.
  Assert: Verify that the returned value remains consistent with each invocation.
Validation:
  The assertion aims to validate that the getExp function doesn't cause any side effects or change any state in any way. This is significant as it helps ensure the immutability of the object.

Scenario 3: Negative Test Case - Test scenario where the exp value has been changed
Details:
  TestName: testGetExpAfterAlteration
  Description: This test is meant to ensure that getExp method works correctly even after the exp value has been changed.
Execution:
  Arrange: None required in this case because the alteration of exp value involves code that is not provided in the current scope.
  Act: Invoke the getExp method.
  Assert: Validate that the returned value is same as the altered value.
Validation:
  The assertion checks if an altered private int returns the correct value after an alteration.

Scenario 4: Non-interference test
Details:
  TestName: testGetExpNonInterference
  Description: This test is designed to verify if the getExp method does not interfere with other private values of an object.
Execution:
  Arrange: None required.
  Act: Invoke the getExp method.
  Assert: Validate that the other private variables of the object (profile, desc, techs) are not disturbed.
Validation:
  The assertion is made to verify that fetching exp does not interfere with or alter other private variables of the object, ensuring object consistency.
*/

// ********RoostGPT********
package com.telusko.joblisting.testModel;

import com.telusko.joblisting.model.Post;
import org.junit.Assert;
import org.junit.Test;
import org.junit.Before;
import org.springframework.data.mongodb.core.mapping.Document;
import java.util.Arrays;

public class PostGetExpTest {

	private Post post;

	@Before
	public void setUp() throws Exception {
		post = new Post();
	}

	@Test
	public void testGetExpDefaultValue() {
		Assert.assertEquals(0, post.getExp());
	}

	@Test
	public void testGetExpConsistency() {
		post.getExp();
		Assert.assertEquals(0, post.getExp());
	}

	@Test
	public void testGetExpAfterAlteration() {
		post.setExp(2); // Assuming there is a setExp() method present in Post Class
		Assert.assertEquals(2, post.getExp());
	}

	@Test
	public void testGetExpNonInterference() {
		post.getExp();
		// Verifying the Other Private Variables
		Assert.assertNull(post.getProfile());
		Assert.assertNull(post.getDesc());
		Assert.assertNull(post.getTechs());
	}

}
