
// ********RoostGPT********
/*
Test generated by RoostGPT for test amanUnit using AI Type AWS Bedrock Runtime AI and AI Model anthropic.claude-3-sonnet-20240229-v1:0

ROOST_METHOD_HASH=getExp_a80bcda041
ROOST_METHOD_SIG_HASH=getExp_e90c52dc7e

```
Scenario 1: Verify getExp returns correct experience value

Details:
  TestName: getExpReturnsCorrectValue
  Description: This test checks if the getExp() method returns the correct experience value when a valid experience is set.
  Execution:
    Arrange: Create an instance of the Post class and set a valid experience value using the setExp() method.
    Act: Call the getExp() method on the Post instance.
    Assert: Verify that the returned value matches the expected experience value.
  Validation:
    The assertion verifies that the getExp() method correctly retrieves the previously set experience value.
    This test is essential to ensure the integrity of the experience data maintained by the Post class.

Scenario 2: Verify getExp returns default experience value

Details:
  TestName: getExpReturnsDefaultValue
  Description: This test checks if the getExp() method returns the default experience value when no experience is explicitly set.
  Execution:
    Arrange: Create an instance of the Post class without setting any experience value.
    Act: Call the getExp() method on the Post instance.
    Assert: Verify that the returned value matches the expected default experience value (e.g., 0 or null, depending on the class implementation).
  Validation:
    The assertion verifies that the getExp() method correctly returns the default experience value when no explicit value is set.
    This test ensures the consistent behavior of the Post class when dealing with uninitialized experience values.

Scenario 3: Verify getExp returns correct experience value after update

Details:
  TestName: getExpReturnsCorrectValueAfterUpdate
  Description: This test checks if the getExp() method returns the correct experience value after updating the experience using the setExp() method.
  Execution:
    Arrange: Create an instance of the Post class and set an initial experience value using the setExp() method.
    Act: Update the experience value using the setExp() method with a different value, then call the getExp() method.
    Assert: Verify that the returned value matches the updated experience value.
  Validation:
    The assertion verifies that the getExp() method correctly retrieves the updated experience value after it has been modified using the setExp() method.
    This test ensures the integrity of the experience data when it is updated and retrieved by the Post class.

Scenario 4: Verify getExp returns correct experience value with negative input

Details:
  TestName: getExpReturnsCorrectValueWithNegativeInput
  Description: This test checks if the getExp() method returns the correct experience value when a negative experience value is set using the setExp() method.
  Execution:
    Arrange: Create an instance of the Post class and set a negative experience value using the setExp() method.
    Act: Call the getExp() method on the Post instance.
    Assert: Verify that the returned value matches the expected negative experience value.
  Validation:
    The assertion verifies that the getExp() method correctly retrieves the negative experience value set using the setExp() method.
    This test ensures the correct handling of negative experience values by the Post class, which may be relevant in certain scenarios or business logic.

```

Note: The provided scenarios cover various cases for the getExp() method, including retrieving the correct experience value, handling default values, updating the experience, and negative experience values. However, additional scenarios can be added based on specific requirements or edge cases identified during the development process.
*/

// ********RoostGPT********

package com.telusko.joblisting.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.springframework.data.mongodb.core.mapping.Document;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

@Document
class PostGetExpTest {

	private Post post;

	@BeforeEach
	void setUp() {
		post = new Post();
	}

	@Test
	@Tag("valid")
	void getExpReturnsCorrectValue() {
		int expectedExp = 5;
		post.setExp(expectedExp);
		int actualExp = post.getExp();
		assertEquals(expectedExp, actualExp);
	}

	@Test
	@Tag("valid")
	void getExpReturnsDefaultValue() {
		int actualExp = post.getExp();
		assertEquals(0, actualExp);
	}

	@Test
	@Tag("valid")
	void getExpReturnsCorrectValueAfterUpdate() {
		int initialExp = 3;
		post.setExp(initialExp);
		int updatedExp = 7;
		post.setExp(updatedExp);
		int actualExp = post.getExp();
		assertEquals(updatedExp, actualExp);
	}

	@Test
	@Tag("boundary")
	void getExpReturnsCorrectValueWithNegativeInput() {
		int negativeExp = -2;
		post.setExp(negativeExp);
		int actualExp = post.getExp();
		assertEquals(negativeExp, actualExp);
	}

}