
// ********RoostGPT********
/*
Test generated by RoostGPT for test amanUnit using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620

ROOST_METHOD_HASH=getExp_a80bcda041
ROOST_METHOD_SIG_HASH=getExp_e90c52dc7e

Based on the provided information and instructions, here are some test scenarios for the `getExp()` method in the `Post` class:

```
Scenario 1: Retrieve Default Experience Value

Details:
  TestName: retrieveDefaultExperienceValue
  Description: This test checks if the getExp() method returns the default value of the exp field when it hasn't been explicitly set.

Execution:
  Arrange: Create a new Post object without setting any values.
  Act: Call the getExp() method on the Post object.
  Assert: Verify that the returned value is 0 (assuming int fields are initialized to 0 by default in Java).

Validation:
  This test ensures that the getExp() method correctly returns the default value of the exp field when it hasn't been explicitly set. It's important to verify default behavior to ensure consistency in the application, especially when dealing with uninitialized objects.

Scenario 2: Retrieve Set Experience Value

Details:
  TestName: retrieveSetExperienceValue
  Description: This test verifies if the getExp() method correctly returns the value that was set using the setExp() method.

Execution:
  Arrange: Create a new Post object and use the setExp() method to set a specific experience value (e.g., 5).
  Act: Call the getExp() method on the Post object.
  Assert: Verify that the returned value matches the value that was set (5 in this case).

Validation:
  This test confirms that the getExp() method accurately retrieves the experience value that was explicitly set. It validates the correct interaction between the setter and getter methods for the exp field, ensuring data integrity within the Post object.

Scenario 3: Retrieve Experience After Multiple Sets

Details:
  TestName: retrieveExperienceAfterMultipleSets
  Description: This test checks if the getExp() method returns the most recent value set by multiple calls to setExp().

Execution:
  Arrange: Create a new Post object, set the experience to 3, then to 7, and finally to 2 using the setExp() method.
  Act: Call the getExp() method on the Post object.
  Assert: Verify that the returned value is 2, which was the last value set.

Validation:
  This test ensures that the getExp() method always returns the most recently set value, regardless of how many times the experience has been changed. It validates that the exp field is correctly updated and that there are no caching issues or unexpected behaviors when modifying the experience multiple times.

Scenario 4: Verify Experience in toString Output

Details:
  TestName: verifyExperienceInToStringOutput
  Description: This test checks if the experience value returned by getExp() is correctly reflected in the toString() method output.

Execution:
  Arrange: Create a new Post object and set a specific experience value (e.g., 10) using setExp().
  Act: Call the toString() method on the Post object.
  Assert: Verify that the returned string contains the correct experience value (10 in this case).

Validation:
  This test ensures that the experience value is correctly incorporated into the string representation of the Post object. It validates the consistency between the getExp() method and the toString() method, which is crucial for debugging and logging purposes.
```

These test scenarios cover various aspects of the `getExp()` method, including default values, setting and retrieving values, multiple updates, and integration with other methods like `toString()`. They aim to ensure the correct functionality of the `getExp()` method within the context of the `Post` class.
*/

// ********RoostGPT********

package com.telusko.joblisting.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import org.springframework.data.mongodb.core.mapping.Document;
import java.util.Arrays;

class PostGetExpTest {

	@Test
	@Tag("valid")
	void retrieveDefaultExperienceValue() {
		Post post = new Post();
		assertEquals(0, post.getExp());
	}

	@Test
	@Tag("valid")
	void retrieveSetExperienceValue() {
		Post post = new Post();
		post.setExp(5);
		assertEquals(5, post.getExp());
	}

	@Test
	@Tag("valid")
	void retrieveExperienceAfterMultipleSets() {
		Post post = new Post();
		post.setExp(3);
		post.setExp(7);
		post.setExp(2);
		assertEquals(2, post.getExp());
	}

	@Test
	@Tag("integration")
	void verifyExperienceInToStringOutput() {
		Post post = new Post();
		post.setExp(10);
		String toStringResult = post.toString();
		assertTrue(toStringResult.contains("exp=10"));
	}

}