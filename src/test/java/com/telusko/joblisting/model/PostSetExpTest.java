// ********RoostGPT********
/*
Test generated by RoostGPT for test aman5May using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=setExp_a708bc0264
ROOST_METHOD_SIG_HASH=setExp_4638d82240

"""
  Scenario 1: Normal case where experience is set with a correct value

  Details:
    TestName: setValidExperience .
    Description: This test verifies that when the method is called with a valid number, the experience in the class is set correctly.
  Execution:
    Arrange: Set up a valid number for experience.
    Act: Invoke the setExp method with the valid experience number.
    Assert: Use JUnit assertions to compare actual experiences that are set with the expected outcomes.
  Validation:
    The assertion checks that the experience is set correctly and represents the user input. This test ensures that the program correctly processes valid user input.

  Scenario 2: Verify exception handling when setExp is called with a negative number

  Details:
    TestName: setNegativeExperience .
    Description: This test ensures that the application handles error cases where the experience of a developer is set to a negative number.
  Execution:
    Arrange: Set up a negative number.
    Act: Invoke the setExp method with the negative number.
    Assert: Expect an IllegalArgumentException for negative experience.
  Validation:
    Test verifies that the application handles error cases and doesn't allow a developer to have negative years of experience.


  Scenario 3: Verify behaviour when setExp is called with a large number, more than 50

  Details:
    TestName: setLargeExperience.
    Description: This test ensures that the application handles cases where the experience of a developer is set to an unusually large number.
  Execution:
    Arrange: Set up an unusually large number, more than 50.
    Act: Invoke the setExp method with the large number.
    Assert: Expect an IllegalArgumentException for unusually large number of experience.
  Validation:
    Test verifies that the application handles cases where the developer experience is too large and not reasonable.


  Scenario 4: Tests edge case where experience is set as zero.

  Details:
    TestName: setZeroExperience .
    Description: This test checks to see if the method behaves as expected when valid but unusual input of zero is given.
  Execution:
    Arrange: Set up a zero for experience.
    Act: Call setExp() with the zero.
    Assert: Use JUnit assertions to check that actual experience set is zero.
  Validation:
    The application can handle unusual but valid inputs. The test verifies that the method behaves correctly even with these edge inputs.
"""
*/

// ********RoostGPT********
package com.telusko.joblisting.model;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import org.springframework.data.mongodb.core.mapping.Document;
import java.util.Arrays;

public class PostSetExpTest {

	private Post post;

	@Before
	public void setUp() {
		post = new Post();
	}

	@Test
	public void setValidExperience() {
		int experience = 10;
		post.setExp(experience);
		assertEquals(experience, post.getExp());
	}

	@Test(expected = IllegalArgumentException.class)
	public void setNegativeExperience() {
		int experience = -3;
		post.setExp(experience);
	}

	@Test(expected = IllegalArgumentException.class)
	public void setLargeExperience() {
		int experience = 100;
		post.setExp(experience);
	}

	@Test
	public void setZeroExperience() {
		int experience = 0;
		post.setExp(experience);
		assertEquals(experience, post.getExp());
	}

}
