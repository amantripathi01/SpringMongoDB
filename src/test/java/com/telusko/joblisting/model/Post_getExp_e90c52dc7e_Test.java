/*
Test generated by RoostGPT for test aman321 using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function returns the correct exp value. 
   - Set up an instance and assign a value to exp, call the getExp() function and verify if it returns the correct value.

2. Scenario: Check if the function returns the default value when no value is assigned to exp.
   - Set up an instance without assigning a value to exp, call the getExp() function and verify if it returns the default value (0 for int).

3. Scenario: Check if the function returns the correct value after multiple changes to exp.
   - Set up an instance and assign multiple different values to exp, call the getExp() function after each change and verify if it returns the correct value each time.

4. Scenario: Check if the function works correctly with negative exp values.
   - Set up an instance and assign a negative value to exp, call the getExp() function and verify if it returns the correct value.

5. Scenario: Check if the function works correctly with the maximum possible exp value.
   - Set up an instance and assign the maximum possible int value to exp, call the getExp() function and verify if it returns the correct value.

6. Scenario: Check if the function works correctly with the minimum possible exp value.
   - Set up an instance and assign the minimum possible int value to exp, call the getExp() function and verify if it returns the correct value.

7. Scenario: Check if the function handles null values correctly.
   - Set up an instance and try to assign a null value to exp, call the getExp() function and verify the result.

Please note that the last scenario is not applicable to this specific function as you cannot assign a null value to a primitive int in Java. It's included for completeness and would be applicable if exp was an object.
*/
package com.telusko.joblisting.model;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class Post_getExp_e90c52dc7e_Test {

    private Post post;

    @Before
    public void setUp() {
        post = new Post();
    }

    @Test
    public void testGetExp_returnsCorrectValue() {
        post.setExp(5);
        int result = post.getExp();
        Assert.assertEquals(5, result);
    }

    @Test
    public void testGetExp_returnsDefaultValue() {
        int result = post.getExp();
        Assert.assertEquals(0, result);
    }

    @Test
    public void testGetExp_returnsCorrectValueAfterMultipleChanges() {
        post.setExp(3);
        Assert.assertEquals(3, post.getExp());

        post.setExp(7);
        Assert.assertEquals(7, post.getExp());

        post.setExp(2);
        Assert.assertEquals(2, post.getExp());
    }

    @Test
    public void testGetExp_handlesNegativeValues() {
        post.setExp(-5);
        int result = post.getExp();
        Assert.assertEquals(-5, result);
    }

    @Test
    public void testGetExp_handlesMaxValue() {
        post.setExp(Integer.MAX_VALUE);
        int result = post.getExp();
        Assert.assertEquals(Integer.MAX_VALUE, result);
    }

    @Test
    public void testGetExp_handlesMinValue() {
        post.setExp(Integer.MIN_VALUE);
        int result = post.getExp();
        Assert.assertEquals(Integer.MIN_VALUE, result);
    }
}
