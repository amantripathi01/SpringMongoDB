// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
public class JoblistingApplication_apiInfo_0779216cdc_Test {

    @InjectMocks
    private JoblistingApplication joblistingApplication;

    @Test
    public void testApiInfo_DefaultValues() {
        ApiInfo apiInfo = joblistingApplication.apiInfo();
        assertNotNull(apiInfo, "ApiInfo should not be null");
        assertNull(apiInfo.getTitle(), "Default title should be null");
        assertNull(apiInfo.getDescription(), "Default description should be null");
        assertNull(apiInfo.getVersion(), "Default version should be null");
        assertNull(apiInfo.getTermsOfServiceUrl(), "Default termsOfServiceUrl should be null");
        assertNull(apiInfo.getContact(), "Default contact should be null");
        assertNull(apiInfo.getLicense(), "Default license should be null");
        assertNull(apiInfo.getLicenseUrl(), "Default licenseUrl should be null");
    }

    @Test
    public void testApiInfo_WithValues() {
        final ApiInfoBuilder builder = new ApiInfoBuilder();
        builder.title("Test Title");
        builder.description("Test Description");
        builder.version("Test Version");
        builder.termsOfServiceUrl("Test Url");
        builder.contact(new Contact("Test Contact", "Test Url", "Test Email"));
        builder.license("Test License");
        builder.licenseUrl("Test License Url");

        ApiInfo apiInfo = builder.build();
        assertNotNull(apiInfo, "ApiInfo should not be null");
        assertEquals("Test Title", apiInfo.getTitle(), "Title should be 'Test Title'");
        assertEquals("Test Description", apiInfo.getDescription(), "Description should be 'Test Description'");
        assertEquals("Test Version", apiInfo.getVersion(), "Version should be 'Test Version'");
        assertEquals("Test Url", apiInfo.getTermsOfServiceUrl(), "termsOfServiceUrl should be 'Test Url'");
        assertNotNull(apiInfo.getContact(), "Contact should not be null");
        assertEquals("Test License", apiInfo.getLicense(), "License should be 'Test License'");
        assertEquals("Test License Url", apiInfo.getLicenseUrl(), "LicenseUrl should be 'Test License Url'");
    }
}
