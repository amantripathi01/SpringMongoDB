// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Mock
    private MongoClient client;

    @Mock
    private MongoDatabase database;

    @Mock
    private MongoCollection<Document> collection;

    @Mock
    private AggregateIterable<Document> result;

    @Mock
    private MongoConverter converter;

    @InjectMocks
    private SearchRepositoryImpl repository;

    @Before
    public void setUp() {
        when(client.getDatabase(anyString())).thenReturn(database);
        when(database.getCollection(anyString())).thenReturn(collection);
        when(collection.aggregate(anyList())).thenReturn(result);
    }

    @Test
    public void testFindByText_success() {
        List<Post> expectedPosts = new ArrayList<>();
        expectedPosts.add(new Post());
        when(result.iterator()).thenReturn(expectedPosts.iterator());
        when(converter.read(any(), any())).thenReturn(new Post());

        List<Post> actualPosts = repository.findByText("Java");

        assertEquals(expectedPosts, actualPosts);
        verify(client).getDatabase("telusko");
        verify(database).getCollection("JobPost");
        verify(collection).aggregate(anyList());
        verify(result, times(expectedPosts.size())).forEach(any());
    }

    @Test
    public void testFindByText_noPostsFound() {
        List<Post> expectedPosts = new ArrayList<>();
        when(result.iterator()).thenReturn(expectedPosts.iterator());

        List<Post> actualPosts = repository.findByText("NonExistingTech");

        assertEquals(expectedPosts, actualPosts);
        verify(client).getDatabase("telusko");
        verify(database).getCollection("JobPost");
        verify(collection).aggregate(anyList());
        verify(result, times(expectedPosts.size())).forEach(any());
    }
}
