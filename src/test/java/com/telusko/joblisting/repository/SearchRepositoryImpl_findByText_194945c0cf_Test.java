// Test generated by RoostGPT for test springMongoDB using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Mock
    private MongoClient client;
    @Mock
    private MongoDatabase database;
    @Mock
    private MongoCollection<Document> collection;
    @Mock
    private MongoConverter converter;
    @Mock
    private AggregateIterable<Document> result;

    private SearchRepositoryImpl repository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        repository = new SearchRepositoryImpl(client, converter);
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
    }

    @Test
    public void testFindByText_Success() {
        List<Post> expectedPosts = new ArrayList<>();
        expectedPosts.add(new Post("Software Engineer", "Software Engineer Job Description", 2, new String[]{"Java", "Spring Boot"}));
        expectedPosts.add(new Post("Data Scientist", "Data Scientist Job Description", 3, new String[]{"Python", "Machine Learning"}));
        when(collection.aggregate(any())).thenReturn(result);
        when(result.spliterator()).thenReturn(expectedPosts.spliterator());
        List<Post> actualPosts = repository.findByText("Software");
        assertEquals(expectedPosts, actualPosts);
    }

    @Test
    public void testFindByText_NoResults() {
        List<Post> expectedPosts = new ArrayList<>();
        when(collection.aggregate(any())).thenReturn(result);
        when(result.spliterator()).thenReturn(expectedPosts.spliterator());
        List<Post> actualPosts = repository.findByText("NonExistentJob");
        assertEquals(expectedPosts, actualPosts);
    }
}
