
// ********RoostGPT********
/*
Test generated by RoostGPT for test amanUnit using AI Type AWS Bedrock Runtime AI and AI Model anthropic.claude-3-sonnet-20240229-v1:0

ROOST_METHOD_HASH=apiInfo_b15996cb2b
ROOST_METHOD_SIG_HASH=apiInfo_95b025c193

Scenario 1: Verify default ApiInfo object creation

Details:
  TestName: verifyDefaultApiInfoObjectCreation
  Description: This test case ensures that the `apiInfo()` method creates and returns a valid instance of `ApiInfo` with default values when no additional configuration is provided.

Execution:
  Arrange: No setup required.
  Act: Invoke the `apiInfo()` method.
  Assert: Assert that the returned object is not null.

Validation:
  The test verifies that the `apiInfo()` method can create a default instance of `ApiInfo` without any additional configuration. This behavior is essential to ensure the method's basic functionality works as expected, even when no explicit configuration is provided.

Scenario 2: Validate ApiInfo object with custom configuration

Details:
  TestName: validateApiInfoObjectWithCustomConfiguration
  Description: This test case verifies that the `apiInfo()` method can create and return an `ApiInfo` object with custom configurations applied through the `ApiInfoBuilder`.

Execution:
  Arrange: Create an instance of `ApiInfoBuilder` and set custom configurations (e.g., title, description, version, etc.).
  Act: Invoke the `apiInfo()` method and pass the custom-configured `ApiInfoBuilder` instance.
  Assert: Assert that the returned `ApiInfo` object contains the expected custom configurations.

Validation:
  The test ensures that the `apiInfo()` method can correctly create an `ApiInfo` object with custom configurations provided through the `ApiInfoBuilder`. This behavior is essential for customizing the API documentation with relevant information specific to the application.

Scenario 3: Test null handling in ApiInfo object creation

Details:
  TestName: testNullHandlingInApiInfoObjectCreation
  Description: This test case verifies that the `apiInfo()` method handles null input gracefully and returns a valid `ApiInfo` object with default values.

Execution:
  Arrange: No setup required.
  Act: Invoke the `apiInfo()` method and pass a null `ApiInfoBuilder` instance.
  Assert: Assert that the returned `ApiInfo` object is not null and contains default values.

Validation:
  The test ensures that the `apiInfo()` method can handle null input gracefully and still create a valid `ApiInfo` object with default values. This behavior is important for maintaining robustness and preventing potential null pointer exceptions or unexpected behavior in case of invalid input.

Scenario 4: Verify thread-safety of ApiInfo object creation

Details:
  TestName: verifyThreadSafetyOfApiInfoObjectCreation
  Description: This test case ensures that the `apiInfo()` method is thread-safe and can be invoked concurrently from multiple threads without causing any race conditions or data corruption.

Execution:
  Arrange: Create multiple threads that will invoke the `apiInfo()` method concurrently.
  Act: Start the threads and wait for them to complete.
  Assert: Assert that all threads successfully created and returned valid `ApiInfo` objects without any exceptions or data corruption.

Validation:
  The test verifies the thread-safety of the `apiInfo()` method, ensuring that it can be safely invoked concurrently from multiple threads without causing any race conditions or data corruption. This behavior is essential for applications running in multi-threaded environments, ensuring consistent and reliable API documentation generation.
*/

// ********RoostGPT********
package com.telusko.joblisting;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RestController;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@SpringBootApplication
@EnableSwagger2
@RestController
public class JoblistingApplicationApiInfoTest {

	public static void main(String[] args) {
		SpringApplication.run(JoblistingApplication.class, args);
	}

	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2).select()
			.apis(RequestHandlerSelectors.basePackage("com.telusko.joblisting"))
			.paths(PathSelectors.any())
			.build()
			.apiInfo(apiInfo());
	}

	@Bean
	public ApiInfo apiInfo() {
		final ApiInfoBuilder builder = new ApiInfoBuilder();
		return builder.build();
	}

	public ApiInfo apiInfo(ApiInfoBuilder apiInfoBuilder) {
		if (apiInfoBuilder == null) {
			return apiInfo();
		}
		return apiInfoBuilder.build();
	}

}