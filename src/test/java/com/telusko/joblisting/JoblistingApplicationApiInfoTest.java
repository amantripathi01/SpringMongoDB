// ********RoostGPT********
/*
Test generated by RoostGPT for test aman5May using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=apiInfo_b15996cb2b
ROOST_METHOD_SIG_HASH=apiInfo_95b025c193

"""
Scenario 1: Test when the apiInfo is successfully built

Details:
  TestName: testApiInfoBuildSuccess
  Description: This test case ensures if the `apiInfo` function is able to generate a new instance of `ApiInfo` through the `ApiInfoBuilder` class.
Execution:
  Arrange: No necessary arrangement as the method doesn't need any arguments or specific setup.
  Act: Call the `apiInfo` method.
  Assert: Assert that the returned object is not null and is an instance of `ApiInfo` class.
Validation:
  The purpose is to confirm that the `apiInfo` method is able to properly create a new instance of `ApiInfo` using the `ApiInfoBuilder`. This scenario is essential as the `apiInfo` method will be used during runtime to instantiate `ApiInfo` and any failure would affect the application.


Scenario 2: Test implausible scenarios

Details:
  TestName: testApiInfoImplausibleScenarios
  Description: This test case makes sure that the apiInfo method is working as expected in different scenarios by testing edge cases and that no exceptions or errors are thrown.
Execution:
  Arrange: No necessary arrangement as the method doesn't need any arguments or specific setup.
  Act: Call the `apiInfo` method multiple times.
  Assert: Assert that each returned object is not null and is an instance of `ApiInfo` class.
Validation:
  The purpose is to verify `apiInfo` method's robustness, regardless of any implausible or edge cases. This can help to avoid unexpected crashes in case the method is called more than expected during runtime.
"""
*/

// ********RoostGPT********
package com.telusko.joblisting;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RestController;
import org.junit.Test;
import static org.junit.Assert.*;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@SpringBootApplication
@RestController
@EnableSwagger2
public class JoblistingApplication {

	public static void main(String[] args) {
		SpringApplication.run(JoblistingApplication.class, args);
	}

	@Bean
	public ApiInfo apiInfo() {
		final ApiInfoBuilder builder = new ApiInfoBuilder();
		return builder.build();
	}

	@Bean
	public Docket swaggerConfiguration() {
		// Returns a prepared Docket instance
		return new Docket(DocumentationType.SWAGGER_2).select()
			.paths(PathSelectors.ant("/api/*"))
			.apis(RequestHandlerSelectors.basePackage("com.telusko"))
			.build()
			.apiInfo(apiInfo());
	}

}

public class JoblistingApplicationApiInfoTest {

	JoblistingApplication joblistingApplication = new JoblistingApplication();

	@Test
	public void testApiInfoBuildSuccess() {
		ApiInfo apiInfo = joblistingApplication.apiInfo();
		assertNotNull(apiInfo);
		assertTrue(apiInfo instanceof ApiInfo);
	}

	@Test
	public void testApiInfoImplausibleScenarios() {
		for (int i = 0; i < 100; i++) {
			ApiInfo apiInfo = joblistingApplication.apiInfo();
			assertNotNull(apiInfo);
			assertTrue(apiInfo instanceof ApiInfo);
		}
	}

}
