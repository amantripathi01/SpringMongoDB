// Test generated by RoostGPT for test aman-1Dec using AI Type Open AI and AI Model gpt-4

// Test generated for /deposit_post for http method type POST in rest-assured framework

// RoostTestHash=70db6d5eac

package com.telusko.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class DepositPostTest {

    @Test  
    public void deposit_post_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\telusko\\RoostTest\\deposit_post.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                Map<String, String> map = extractData(headers, line.split(","));  
                Response response = makePostRequest(map); 
                validateResponse(response);
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private Map<String, String> extractData(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();  
        for (int i = 0; i < headers.length; i++) {  
            map.put(headers[i], data[i]);  
        }
        return map;
    }

    private Response makePostRequest(Map<String, String> map) {
        return given()
                .pathParam("koreUserId", map.get("koreUserId"))
                .pathParam("botId", map.get("botId"))
                .pathParam("accountId", map.get("accountId"))
                .pathParam("Authorization", map.get("Authorization"))
                .contentType(ContentType.JSON)
                .body("{\n"+
                    "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
                    "  \"sourceAccountId\": \"" + map.get("sourceAccountId") + "\",\n" +
                    "  \"amount\": \"" + map.get("amount") + "\",\n" +
                    "  \"currency\": \"" + map.get("currency") + "\",\n" +
                    "  \"image\": \"" + map.get("image") + "\n" +
                "}")
                .when()
                .post("/deposit")  
                .then() 
                .extract().response();
    }

    private void validateResponse(Response response) {
        switch (response.statusCode()) {
            case 200:
                System.out.println("Description: Deposit success");
                break;
            case 401:
                System.out.println("Description: Error: Authorisation failed.");
                validateErrorResponse(response);
                break;
            case 404:
                System.out.println("Description: Error: Not Found");
                validateNotFoundResponse(response);
                break;
            default:
                System.out.println("Unexpected status code: " + response.statusCode());
                break;
        }
    }

    private void validateErrorResponse(Response response) {
        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));  
        } else {
            fail("Error response does not contain expected fields.");
        }
    }

    private void validateNotFoundResponse(Response response) {
        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));  
        } else {
            fail("Not Found response does not contain expected fields.");
        }
    }

}
